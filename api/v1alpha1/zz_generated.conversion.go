// +build !ignore_autogenerated

/*
Copyright 2020 GramLabs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	v1beta1 "github.com/redskyops/redskyops-controller/api/v1beta1"
	v1 "k8s.io/api/core/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*Assignment)(nil), (*v1beta1.Assignment)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Assignment_To_v1beta1_Assignment(a.(*Assignment), b.(*v1beta1.Assignment), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.Assignment)(nil), (*Assignment)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_Assignment_To_v1alpha1_Assignment(a.(*v1beta1.Assignment), b.(*Assignment), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ConfigMapHelmValuesFromSource)(nil), (*v1beta1.ConfigMapHelmValuesFromSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ConfigMapHelmValuesFromSource_To_v1beta1_ConfigMapHelmValuesFromSource(a.(*ConfigMapHelmValuesFromSource), b.(*v1beta1.ConfigMapHelmValuesFromSource), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.ConfigMapHelmValuesFromSource)(nil), (*ConfigMapHelmValuesFromSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_ConfigMapHelmValuesFromSource_To_v1alpha1_ConfigMapHelmValuesFromSource(a.(*v1beta1.ConfigMapHelmValuesFromSource), b.(*ConfigMapHelmValuesFromSource), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Constraint)(nil), (*v1beta1.Constraint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Constraint_To_v1beta1_Constraint(a.(*Constraint), b.(*v1beta1.Constraint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.Constraint)(nil), (*Constraint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_Constraint_To_v1alpha1_Constraint(a.(*v1beta1.Constraint), b.(*Constraint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Experiment)(nil), (*v1beta1.Experiment)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Experiment_To_v1beta1_Experiment(a.(*Experiment), b.(*v1beta1.Experiment), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.Experiment)(nil), (*Experiment)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_Experiment_To_v1alpha1_Experiment(a.(*v1beta1.Experiment), b.(*Experiment), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ExperimentCondition)(nil), (*v1beta1.ExperimentCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ExperimentCondition_To_v1beta1_ExperimentCondition(a.(*ExperimentCondition), b.(*v1beta1.ExperimentCondition), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.ExperimentCondition)(nil), (*ExperimentCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_ExperimentCondition_To_v1alpha1_ExperimentCondition(a.(*v1beta1.ExperimentCondition), b.(*ExperimentCondition), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ExperimentList)(nil), (*v1beta1.ExperimentList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ExperimentList_To_v1beta1_ExperimentList(a.(*ExperimentList), b.(*v1beta1.ExperimentList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.ExperimentList)(nil), (*ExperimentList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_ExperimentList_To_v1alpha1_ExperimentList(a.(*v1beta1.ExperimentList), b.(*ExperimentList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ExperimentStatus)(nil), (*v1beta1.ExperimentStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ExperimentStatus_To_v1beta1_ExperimentStatus(a.(*ExperimentStatus), b.(*v1beta1.ExperimentStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.ExperimentStatus)(nil), (*ExperimentStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_ExperimentStatus_To_v1alpha1_ExperimentStatus(a.(*v1beta1.ExperimentStatus), b.(*ExperimentStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*HelmValue)(nil), (*v1beta1.HelmValue)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_HelmValue_To_v1beta1_HelmValue(a.(*HelmValue), b.(*v1beta1.HelmValue), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.HelmValue)(nil), (*HelmValue)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_HelmValue_To_v1alpha1_HelmValue(a.(*v1beta1.HelmValue), b.(*HelmValue), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*HelmValueSource)(nil), (*v1beta1.HelmValueSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_HelmValueSource_To_v1beta1_HelmValueSource(a.(*HelmValueSource), b.(*v1beta1.HelmValueSource), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.HelmValueSource)(nil), (*HelmValueSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_HelmValueSource_To_v1alpha1_HelmValueSource(a.(*v1beta1.HelmValueSource), b.(*HelmValueSource), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*HelmValuesFromSource)(nil), (*v1beta1.HelmValuesFromSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_HelmValuesFromSource_To_v1beta1_HelmValuesFromSource(a.(*HelmValuesFromSource), b.(*v1beta1.HelmValuesFromSource), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.HelmValuesFromSource)(nil), (*HelmValuesFromSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_HelmValuesFromSource_To_v1alpha1_HelmValuesFromSource(a.(*v1beta1.HelmValuesFromSource), b.(*HelmValuesFromSource), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*NamespaceTemplateSpec)(nil), (*v1beta1.NamespaceTemplateSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_NamespaceTemplateSpec_To_v1beta1_NamespaceTemplateSpec(a.(*NamespaceTemplateSpec), b.(*v1beta1.NamespaceTemplateSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.NamespaceTemplateSpec)(nil), (*NamespaceTemplateSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_NamespaceTemplateSpec_To_v1alpha1_NamespaceTemplateSpec(a.(*v1beta1.NamespaceTemplateSpec), b.(*NamespaceTemplateSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Optimization)(nil), (*v1beta1.Optimization)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Optimization_To_v1beta1_Optimization(a.(*Optimization), b.(*v1beta1.Optimization), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.Optimization)(nil), (*Optimization)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_Optimization_To_v1alpha1_Optimization(a.(*v1beta1.Optimization), b.(*Optimization), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*OrderConstraint)(nil), (*v1beta1.OrderConstraint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_OrderConstraint_To_v1beta1_OrderConstraint(a.(*OrderConstraint), b.(*v1beta1.OrderConstraint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.OrderConstraint)(nil), (*OrderConstraint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_OrderConstraint_To_v1alpha1_OrderConstraint(a.(*v1beta1.OrderConstraint), b.(*OrderConstraint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ParameterSelector)(nil), (*v1beta1.ParameterSelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ParameterSelector_To_v1beta1_ParameterSelector(a.(*ParameterSelector), b.(*v1beta1.ParameterSelector), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.ParameterSelector)(nil), (*ParameterSelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_ParameterSelector_To_v1alpha1_ParameterSelector(a.(*v1beta1.ParameterSelector), b.(*ParameterSelector), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*PatchOperation)(nil), (*v1beta1.PatchOperation)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PatchOperation_To_v1beta1_PatchOperation(a.(*PatchOperation), b.(*v1beta1.PatchOperation), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.PatchOperation)(nil), (*PatchOperation)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_PatchOperation_To_v1alpha1_PatchOperation(a.(*v1beta1.PatchOperation), b.(*PatchOperation), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*PatchReadinessGate)(nil), (*v1beta1.PatchReadinessGate)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PatchReadinessGate_To_v1beta1_PatchReadinessGate(a.(*PatchReadinessGate), b.(*v1beta1.PatchReadinessGate), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.PatchReadinessGate)(nil), (*PatchReadinessGate)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_PatchReadinessGate_To_v1alpha1_PatchReadinessGate(a.(*v1beta1.PatchReadinessGate), b.(*PatchReadinessGate), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*PatchTemplate)(nil), (*v1beta1.PatchTemplate)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PatchTemplate_To_v1beta1_PatchTemplate(a.(*PatchTemplate), b.(*v1beta1.PatchTemplate), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.PatchTemplate)(nil), (*PatchTemplate)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_PatchTemplate_To_v1alpha1_PatchTemplate(a.(*v1beta1.PatchTemplate), b.(*PatchTemplate), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ReadinessCheck)(nil), (*v1beta1.ReadinessCheck)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ReadinessCheck_To_v1beta1_ReadinessCheck(a.(*ReadinessCheck), b.(*v1beta1.ReadinessCheck), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.ReadinessCheck)(nil), (*ReadinessCheck)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_ReadinessCheck_To_v1alpha1_ReadinessCheck(a.(*v1beta1.ReadinessCheck), b.(*ReadinessCheck), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*SetupTask)(nil), (*v1beta1.SetupTask)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_SetupTask_To_v1beta1_SetupTask(a.(*SetupTask), b.(*v1beta1.SetupTask), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.SetupTask)(nil), (*SetupTask)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_SetupTask_To_v1alpha1_SetupTask(a.(*v1beta1.SetupTask), b.(*SetupTask), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*SumConstraint)(nil), (*v1beta1.SumConstraint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_SumConstraint_To_v1beta1_SumConstraint(a.(*SumConstraint), b.(*v1beta1.SumConstraint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.SumConstraint)(nil), (*SumConstraint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_SumConstraint_To_v1alpha1_SumConstraint(a.(*v1beta1.SumConstraint), b.(*SumConstraint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*SumConstraintParameter)(nil), (*v1beta1.SumConstraintParameter)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_SumConstraintParameter_To_v1beta1_SumConstraintParameter(a.(*SumConstraintParameter), b.(*v1beta1.SumConstraintParameter), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.SumConstraintParameter)(nil), (*SumConstraintParameter)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_SumConstraintParameter_To_v1alpha1_SumConstraintParameter(a.(*v1beta1.SumConstraintParameter), b.(*SumConstraintParameter), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TrialCondition)(nil), (*v1beta1.TrialCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TrialCondition_To_v1beta1_TrialCondition(a.(*TrialCondition), b.(*v1beta1.TrialCondition), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.TrialCondition)(nil), (*TrialCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_TrialCondition_To_v1alpha1_TrialCondition(a.(*v1beta1.TrialCondition), b.(*TrialCondition), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TrialList)(nil), (*v1beta1.TrialList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TrialList_To_v1beta1_TrialList(a.(*TrialList), b.(*v1beta1.TrialList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.TrialList)(nil), (*TrialList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_TrialList_To_v1alpha1_TrialList(a.(*v1beta1.TrialList), b.(*TrialList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TrialReadinessGate)(nil), (*v1beta1.TrialReadinessGate)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TrialReadinessGate_To_v1beta1_TrialReadinessGate(a.(*TrialReadinessGate), b.(*v1beta1.TrialReadinessGate), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.TrialReadinessGate)(nil), (*TrialReadinessGate)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_TrialReadinessGate_To_v1alpha1_TrialReadinessGate(a.(*v1beta1.TrialReadinessGate), b.(*TrialReadinessGate), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TrialStatus)(nil), (*v1beta1.TrialStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TrialStatus_To_v1beta1_TrialStatus(a.(*TrialStatus), b.(*v1beta1.TrialStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TrialTemplateSpec)(nil), (*v1beta1.TrialTemplateSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TrialTemplateSpec_To_v1beta1_TrialTemplateSpec(a.(*TrialTemplateSpec), b.(*v1beta1.TrialTemplateSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.TrialTemplateSpec)(nil), (*TrialTemplateSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_TrialTemplateSpec_To_v1alpha1_TrialTemplateSpec(a.(*v1beta1.TrialTemplateSpec), b.(*TrialTemplateSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Value)(nil), (*v1beta1.Value)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Value_To_v1beta1_Value(a.(*Value), b.(*v1beta1.Value), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.Value)(nil), (*Value)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_Value_To_v1alpha1_Value(a.(*v1beta1.Value), b.(*Value), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*ExperimentSpec)(nil), (*v1beta1.ExperimentSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ExperimentSpec_To_v1beta1_ExperimentSpec(a.(*ExperimentSpec), b.(*v1beta1.ExperimentSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*Metric)(nil), (*v1beta1.Metric)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Metric_To_v1beta1_Metric(a.(*Metric), b.(*v1beta1.Metric), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*Parameter)(nil), (*v1beta1.Parameter)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Parameter_To_v1beta1_Parameter(a.(*Parameter), b.(*v1beta1.Parameter), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*TrialSpec)(nil), (*v1beta1.TrialSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TrialSpec_To_v1beta1_TrialSpec(a.(*TrialSpec), b.(*v1beta1.TrialSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*Trial)(nil), (*v1beta1.Trial)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Trial_To_v1beta1_Trial(a.(*Trial), b.(*v1beta1.Trial), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1beta1.ExperimentSpec)(nil), (*ExperimentSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_ExperimentSpec_To_v1alpha1_ExperimentSpec(a.(*v1beta1.ExperimentSpec), b.(*ExperimentSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1beta1.Metric)(nil), (*Metric)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_Metric_To_v1alpha1_Metric(a.(*v1beta1.Metric), b.(*Metric), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1beta1.Parameter)(nil), (*Parameter)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_Parameter_To_v1alpha1_Parameter(a.(*v1beta1.Parameter), b.(*Parameter), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1beta1.TrialSpec)(nil), (*TrialSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_TrialSpec_To_v1alpha1_TrialSpec(a.(*v1beta1.TrialSpec), b.(*TrialSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1beta1.TrialStatus)(nil), (*TrialStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_TrialStatus_To_v1alpha1_TrialStatus(a.(*v1beta1.TrialStatus), b.(*TrialStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1beta1.Trial)(nil), (*Trial)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_Trial_To_v1alpha1_Trial(a.(*v1beta1.Trial), b.(*Trial), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_Assignment_To_v1beta1_Assignment(in *Assignment, out *v1beta1.Assignment, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	return nil
}

// Convert_v1alpha1_Assignment_To_v1beta1_Assignment is an autogenerated conversion function.
func Convert_v1alpha1_Assignment_To_v1beta1_Assignment(in *Assignment, out *v1beta1.Assignment, s conversion.Scope) error {
	return autoConvert_v1alpha1_Assignment_To_v1beta1_Assignment(in, out, s)
}

func autoConvert_v1beta1_Assignment_To_v1alpha1_Assignment(in *v1beta1.Assignment, out *Assignment, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	return nil
}

// Convert_v1beta1_Assignment_To_v1alpha1_Assignment is an autogenerated conversion function.
func Convert_v1beta1_Assignment_To_v1alpha1_Assignment(in *v1beta1.Assignment, out *Assignment, s conversion.Scope) error {
	return autoConvert_v1beta1_Assignment_To_v1alpha1_Assignment(in, out, s)
}

func autoConvert_v1alpha1_ConfigMapHelmValuesFromSource_To_v1beta1_ConfigMapHelmValuesFromSource(in *ConfigMapHelmValuesFromSource, out *v1beta1.ConfigMapHelmValuesFromSource, s conversion.Scope) error {
	out.LocalObjectReference = in.LocalObjectReference
	return nil
}

// Convert_v1alpha1_ConfigMapHelmValuesFromSource_To_v1beta1_ConfigMapHelmValuesFromSource is an autogenerated conversion function.
func Convert_v1alpha1_ConfigMapHelmValuesFromSource_To_v1beta1_ConfigMapHelmValuesFromSource(in *ConfigMapHelmValuesFromSource, out *v1beta1.ConfigMapHelmValuesFromSource, s conversion.Scope) error {
	return autoConvert_v1alpha1_ConfigMapHelmValuesFromSource_To_v1beta1_ConfigMapHelmValuesFromSource(in, out, s)
}

func autoConvert_v1beta1_ConfigMapHelmValuesFromSource_To_v1alpha1_ConfigMapHelmValuesFromSource(in *v1beta1.ConfigMapHelmValuesFromSource, out *ConfigMapHelmValuesFromSource, s conversion.Scope) error {
	out.LocalObjectReference = in.LocalObjectReference
	return nil
}

// Convert_v1beta1_ConfigMapHelmValuesFromSource_To_v1alpha1_ConfigMapHelmValuesFromSource is an autogenerated conversion function.
func Convert_v1beta1_ConfigMapHelmValuesFromSource_To_v1alpha1_ConfigMapHelmValuesFromSource(in *v1beta1.ConfigMapHelmValuesFromSource, out *ConfigMapHelmValuesFromSource, s conversion.Scope) error {
	return autoConvert_v1beta1_ConfigMapHelmValuesFromSource_To_v1alpha1_ConfigMapHelmValuesFromSource(in, out, s)
}

func autoConvert_v1alpha1_Constraint_To_v1beta1_Constraint(in *Constraint, out *v1beta1.Constraint, s conversion.Scope) error {
	out.Name = in.Name
	if in.Order != nil {
		in, out := &in.Order, &out.Order
		*out = new(v1beta1.OrderConstraint)
		if err := Convert_v1alpha1_OrderConstraint_To_v1beta1_OrderConstraint(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Order = nil
	}
	if in.Sum != nil {
		in, out := &in.Sum, &out.Sum
		*out = new(v1beta1.SumConstraint)
		if err := Convert_v1alpha1_SumConstraint_To_v1beta1_SumConstraint(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Sum = nil
	}
	return nil
}

// Convert_v1alpha1_Constraint_To_v1beta1_Constraint is an autogenerated conversion function.
func Convert_v1alpha1_Constraint_To_v1beta1_Constraint(in *Constraint, out *v1beta1.Constraint, s conversion.Scope) error {
	return autoConvert_v1alpha1_Constraint_To_v1beta1_Constraint(in, out, s)
}

func autoConvert_v1beta1_Constraint_To_v1alpha1_Constraint(in *v1beta1.Constraint, out *Constraint, s conversion.Scope) error {
	out.Name = in.Name
	if in.Order != nil {
		in, out := &in.Order, &out.Order
		*out = new(OrderConstraint)
		if err := Convert_v1beta1_OrderConstraint_To_v1alpha1_OrderConstraint(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Order = nil
	}
	if in.Sum != nil {
		in, out := &in.Sum, &out.Sum
		*out = new(SumConstraint)
		if err := Convert_v1beta1_SumConstraint_To_v1alpha1_SumConstraint(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Sum = nil
	}
	return nil
}

// Convert_v1beta1_Constraint_To_v1alpha1_Constraint is an autogenerated conversion function.
func Convert_v1beta1_Constraint_To_v1alpha1_Constraint(in *v1beta1.Constraint, out *Constraint, s conversion.Scope) error {
	return autoConvert_v1beta1_Constraint_To_v1alpha1_Constraint(in, out, s)
}

func autoConvert_v1alpha1_Experiment_To_v1beta1_Experiment(in *Experiment, out *v1beta1.Experiment, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_ExperimentSpec_To_v1beta1_ExperimentSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_ExperimentStatus_To_v1beta1_ExperimentStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_Experiment_To_v1beta1_Experiment is an autogenerated conversion function.
func Convert_v1alpha1_Experiment_To_v1beta1_Experiment(in *Experiment, out *v1beta1.Experiment, s conversion.Scope) error {
	return autoConvert_v1alpha1_Experiment_To_v1beta1_Experiment(in, out, s)
}

func autoConvert_v1beta1_Experiment_To_v1alpha1_Experiment(in *v1beta1.Experiment, out *Experiment, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1beta1_ExperimentSpec_To_v1alpha1_ExperimentSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1beta1_ExperimentStatus_To_v1alpha1_ExperimentStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1beta1_Experiment_To_v1alpha1_Experiment is an autogenerated conversion function.
func Convert_v1beta1_Experiment_To_v1alpha1_Experiment(in *v1beta1.Experiment, out *Experiment, s conversion.Scope) error {
	return autoConvert_v1beta1_Experiment_To_v1alpha1_Experiment(in, out, s)
}

func autoConvert_v1alpha1_ExperimentCondition_To_v1beta1_ExperimentCondition(in *ExperimentCondition, out *v1beta1.ExperimentCondition, s conversion.Scope) error {
	out.Type = v1beta1.ExperimentConditionType(in.Type)
	out.Status = v1.ConditionStatus(in.Status)
	out.LastProbeTime = in.LastProbeTime
	out.LastTransitionTime = in.LastTransitionTime
	out.Reason = in.Reason
	out.Message = in.Message
	return nil
}

// Convert_v1alpha1_ExperimentCondition_To_v1beta1_ExperimentCondition is an autogenerated conversion function.
func Convert_v1alpha1_ExperimentCondition_To_v1beta1_ExperimentCondition(in *ExperimentCondition, out *v1beta1.ExperimentCondition, s conversion.Scope) error {
	return autoConvert_v1alpha1_ExperimentCondition_To_v1beta1_ExperimentCondition(in, out, s)
}

func autoConvert_v1beta1_ExperimentCondition_To_v1alpha1_ExperimentCondition(in *v1beta1.ExperimentCondition, out *ExperimentCondition, s conversion.Scope) error {
	out.Type = ExperimentConditionType(in.Type)
	out.Status = v1.ConditionStatus(in.Status)
	out.LastProbeTime = in.LastProbeTime
	out.LastTransitionTime = in.LastTransitionTime
	out.Reason = in.Reason
	out.Message = in.Message
	return nil
}

// Convert_v1beta1_ExperimentCondition_To_v1alpha1_ExperimentCondition is an autogenerated conversion function.
func Convert_v1beta1_ExperimentCondition_To_v1alpha1_ExperimentCondition(in *v1beta1.ExperimentCondition, out *ExperimentCondition, s conversion.Scope) error {
	return autoConvert_v1beta1_ExperimentCondition_To_v1alpha1_ExperimentCondition(in, out, s)
}

func autoConvert_v1alpha1_ExperimentList_To_v1beta1_ExperimentList(in *ExperimentList, out *v1beta1.ExperimentList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1beta1.Experiment, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Experiment_To_v1beta1_Experiment(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_ExperimentList_To_v1beta1_ExperimentList is an autogenerated conversion function.
func Convert_v1alpha1_ExperimentList_To_v1beta1_ExperimentList(in *ExperimentList, out *v1beta1.ExperimentList, s conversion.Scope) error {
	return autoConvert_v1alpha1_ExperimentList_To_v1beta1_ExperimentList(in, out, s)
}

func autoConvert_v1beta1_ExperimentList_To_v1alpha1_ExperimentList(in *v1beta1.ExperimentList, out *ExperimentList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Experiment, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_Experiment_To_v1alpha1_Experiment(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1beta1_ExperimentList_To_v1alpha1_ExperimentList is an autogenerated conversion function.
func Convert_v1beta1_ExperimentList_To_v1alpha1_ExperimentList(in *v1beta1.ExperimentList, out *ExperimentList, s conversion.Scope) error {
	return autoConvert_v1beta1_ExperimentList_To_v1alpha1_ExperimentList(in, out, s)
}

func autoConvert_v1alpha1_ExperimentSpec_To_v1beta1_ExperimentSpec(in *ExperimentSpec, out *v1beta1.ExperimentSpec, s conversion.Scope) error {
	out.Replicas = in.Replicas
	if in.Optimization != nil {
		in, out := &in.Optimization, &out.Optimization
		*out = make([]v1beta1.Optimization, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Optimization_To_v1beta1_Optimization(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Optimization = nil
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]v1beta1.Parameter, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Parameter_To_v1beta1_Parameter(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Parameters = nil
	}
	if in.Constraints != nil {
		in, out := &in.Constraints, &out.Constraints
		*out = make([]v1beta1.Constraint, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Constraint_To_v1beta1_Constraint(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Constraints = nil
	}
	if in.Metrics != nil {
		in, out := &in.Metrics, &out.Metrics
		*out = make([]v1beta1.Metric, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Metric_To_v1beta1_Metric(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Metrics = nil
	}
	if in.Patches != nil {
		in, out := &in.Patches, &out.Patches
		*out = make([]v1beta1.PatchTemplate, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_PatchTemplate_To_v1beta1_PatchTemplate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Patches = nil
	}
	out.NamespaceSelector = in.NamespaceSelector
	if in.NamespaceTemplate != nil {
		in, out := &in.NamespaceTemplate, &out.NamespaceTemplate
		*out = new(v1beta1.NamespaceTemplateSpec)
		if err := Convert_v1alpha1_NamespaceTemplateSpec_To_v1beta1_NamespaceTemplateSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.NamespaceTemplate = nil
	}
	out.Selector = in.Selector
	// WARNING: in.Template requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1beta1_ExperimentSpec_To_v1alpha1_ExperimentSpec(in *v1beta1.ExperimentSpec, out *ExperimentSpec, s conversion.Scope) error {
	out.Replicas = in.Replicas
	if in.Optimization != nil {
		in, out := &in.Optimization, &out.Optimization
		*out = make([]Optimization, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_Optimization_To_v1alpha1_Optimization(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Optimization = nil
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]Parameter, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_Parameter_To_v1alpha1_Parameter(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Parameters = nil
	}
	if in.Constraints != nil {
		in, out := &in.Constraints, &out.Constraints
		*out = make([]Constraint, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_Constraint_To_v1alpha1_Constraint(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Constraints = nil
	}
	if in.Metrics != nil {
		in, out := &in.Metrics, &out.Metrics
		*out = make([]Metric, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_Metric_To_v1alpha1_Metric(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Metrics = nil
	}
	if in.Patches != nil {
		in, out := &in.Patches, &out.Patches
		*out = make([]PatchTemplate, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_PatchTemplate_To_v1alpha1_PatchTemplate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Patches = nil
	}
	out.NamespaceSelector = in.NamespaceSelector
	if in.NamespaceTemplate != nil {
		in, out := &in.NamespaceTemplate, &out.NamespaceTemplate
		*out = new(NamespaceTemplateSpec)
		if err := Convert_v1beta1_NamespaceTemplateSpec_To_v1alpha1_NamespaceTemplateSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.NamespaceTemplate = nil
	}
	out.Selector = in.Selector
	// WARNING: in.TrialTemplate requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_ExperimentStatus_To_v1beta1_ExperimentStatus(in *ExperimentStatus, out *v1beta1.ExperimentStatus, s conversion.Scope) error {
	out.Phase = in.Phase
	out.ActiveTrials = in.ActiveTrials
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1beta1.ExperimentCondition, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_ExperimentCondition_To_v1beta1_ExperimentCondition(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Conditions = nil
	}
	return nil
}

// Convert_v1alpha1_ExperimentStatus_To_v1beta1_ExperimentStatus is an autogenerated conversion function.
func Convert_v1alpha1_ExperimentStatus_To_v1beta1_ExperimentStatus(in *ExperimentStatus, out *v1beta1.ExperimentStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_ExperimentStatus_To_v1beta1_ExperimentStatus(in, out, s)
}

func autoConvert_v1beta1_ExperimentStatus_To_v1alpha1_ExperimentStatus(in *v1beta1.ExperimentStatus, out *ExperimentStatus, s conversion.Scope) error {
	out.Phase = in.Phase
	out.ActiveTrials = in.ActiveTrials
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]ExperimentCondition, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_ExperimentCondition_To_v1alpha1_ExperimentCondition(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Conditions = nil
	}
	return nil
}

// Convert_v1beta1_ExperimentStatus_To_v1alpha1_ExperimentStatus is an autogenerated conversion function.
func Convert_v1beta1_ExperimentStatus_To_v1alpha1_ExperimentStatus(in *v1beta1.ExperimentStatus, out *ExperimentStatus, s conversion.Scope) error {
	return autoConvert_v1beta1_ExperimentStatus_To_v1alpha1_ExperimentStatus(in, out, s)
}

func autoConvert_v1alpha1_HelmValue_To_v1beta1_HelmValue(in *HelmValue, out *v1beta1.HelmValue, s conversion.Scope) error {
	out.Name = in.Name
	out.ForceString = in.ForceString
	out.Value = in.Value
	if in.ValueFrom != nil {
		in, out := &in.ValueFrom, &out.ValueFrom
		*out = new(v1beta1.HelmValueSource)
		if err := Convert_v1alpha1_HelmValueSource_To_v1beta1_HelmValueSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ValueFrom = nil
	}
	return nil
}

// Convert_v1alpha1_HelmValue_To_v1beta1_HelmValue is an autogenerated conversion function.
func Convert_v1alpha1_HelmValue_To_v1beta1_HelmValue(in *HelmValue, out *v1beta1.HelmValue, s conversion.Scope) error {
	return autoConvert_v1alpha1_HelmValue_To_v1beta1_HelmValue(in, out, s)
}

func autoConvert_v1beta1_HelmValue_To_v1alpha1_HelmValue(in *v1beta1.HelmValue, out *HelmValue, s conversion.Scope) error {
	out.Name = in.Name
	out.ForceString = in.ForceString
	out.Value = in.Value
	if in.ValueFrom != nil {
		in, out := &in.ValueFrom, &out.ValueFrom
		*out = new(HelmValueSource)
		if err := Convert_v1beta1_HelmValueSource_To_v1alpha1_HelmValueSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ValueFrom = nil
	}
	return nil
}

// Convert_v1beta1_HelmValue_To_v1alpha1_HelmValue is an autogenerated conversion function.
func Convert_v1beta1_HelmValue_To_v1alpha1_HelmValue(in *v1beta1.HelmValue, out *HelmValue, s conversion.Scope) error {
	return autoConvert_v1beta1_HelmValue_To_v1alpha1_HelmValue(in, out, s)
}

func autoConvert_v1alpha1_HelmValueSource_To_v1beta1_HelmValueSource(in *HelmValueSource, out *v1beta1.HelmValueSource, s conversion.Scope) error {
	if in.ParameterRef != nil {
		in, out := &in.ParameterRef, &out.ParameterRef
		*out = new(v1beta1.ParameterSelector)
		if err := Convert_v1alpha1_ParameterSelector_To_v1beta1_ParameterSelector(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ParameterRef = nil
	}
	return nil
}

// Convert_v1alpha1_HelmValueSource_To_v1beta1_HelmValueSource is an autogenerated conversion function.
func Convert_v1alpha1_HelmValueSource_To_v1beta1_HelmValueSource(in *HelmValueSource, out *v1beta1.HelmValueSource, s conversion.Scope) error {
	return autoConvert_v1alpha1_HelmValueSource_To_v1beta1_HelmValueSource(in, out, s)
}

func autoConvert_v1beta1_HelmValueSource_To_v1alpha1_HelmValueSource(in *v1beta1.HelmValueSource, out *HelmValueSource, s conversion.Scope) error {
	if in.ParameterRef != nil {
		in, out := &in.ParameterRef, &out.ParameterRef
		*out = new(ParameterSelector)
		if err := Convert_v1beta1_ParameterSelector_To_v1alpha1_ParameterSelector(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ParameterRef = nil
	}
	return nil
}

// Convert_v1beta1_HelmValueSource_To_v1alpha1_HelmValueSource is an autogenerated conversion function.
func Convert_v1beta1_HelmValueSource_To_v1alpha1_HelmValueSource(in *v1beta1.HelmValueSource, out *HelmValueSource, s conversion.Scope) error {
	return autoConvert_v1beta1_HelmValueSource_To_v1alpha1_HelmValueSource(in, out, s)
}

func autoConvert_v1alpha1_HelmValuesFromSource_To_v1beta1_HelmValuesFromSource(in *HelmValuesFromSource, out *v1beta1.HelmValuesFromSource, s conversion.Scope) error {
	if in.ConfigMap != nil {
		in, out := &in.ConfigMap, &out.ConfigMap
		*out = new(v1beta1.ConfigMapHelmValuesFromSource)
		if err := Convert_v1alpha1_ConfigMapHelmValuesFromSource_To_v1beta1_ConfigMapHelmValuesFromSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ConfigMap = nil
	}
	return nil
}

// Convert_v1alpha1_HelmValuesFromSource_To_v1beta1_HelmValuesFromSource is an autogenerated conversion function.
func Convert_v1alpha1_HelmValuesFromSource_To_v1beta1_HelmValuesFromSource(in *HelmValuesFromSource, out *v1beta1.HelmValuesFromSource, s conversion.Scope) error {
	return autoConvert_v1alpha1_HelmValuesFromSource_To_v1beta1_HelmValuesFromSource(in, out, s)
}

func autoConvert_v1beta1_HelmValuesFromSource_To_v1alpha1_HelmValuesFromSource(in *v1beta1.HelmValuesFromSource, out *HelmValuesFromSource, s conversion.Scope) error {
	if in.ConfigMap != nil {
		in, out := &in.ConfigMap, &out.ConfigMap
		*out = new(ConfigMapHelmValuesFromSource)
		if err := Convert_v1beta1_ConfigMapHelmValuesFromSource_To_v1alpha1_ConfigMapHelmValuesFromSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ConfigMap = nil
	}
	return nil
}

// Convert_v1beta1_HelmValuesFromSource_To_v1alpha1_HelmValuesFromSource is an autogenerated conversion function.
func Convert_v1beta1_HelmValuesFromSource_To_v1alpha1_HelmValuesFromSource(in *v1beta1.HelmValuesFromSource, out *HelmValuesFromSource, s conversion.Scope) error {
	return autoConvert_v1beta1_HelmValuesFromSource_To_v1alpha1_HelmValuesFromSource(in, out, s)
}

func autoConvert_v1alpha1_Metric_To_v1beta1_Metric(in *Metric, out *v1beta1.Metric, s conversion.Scope) error {
	out.Name = in.Name
	out.Minimize = in.Minimize
	out.Min = in.Min
	out.Max = in.Max
	out.Optimize = in.Optimize
	out.Type = v1beta1.MetricType(in.Type)
	out.Query = in.Query
	out.ErrorQuery = in.ErrorQuery
	// WARNING: in.Scheme requires manual conversion: does not exist in peer-type
	out.Selector = in.Selector
	// WARNING: in.Port requires manual conversion: does not exist in peer-type
	// WARNING: in.Path requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1beta1_Metric_To_v1alpha1_Metric(in *v1beta1.Metric, out *Metric, s conversion.Scope) error {
	out.Name = in.Name
	out.Minimize = in.Minimize
	out.Min = in.Min
	out.Max = in.Max
	out.Optimize = in.Optimize
	out.Type = MetricType(in.Type)
	out.Query = in.Query
	out.ErrorQuery = in.ErrorQuery
	// WARNING: in.URL requires manual conversion: does not exist in peer-type
	// WARNING: in.TargetRef requires manual conversion: does not exist in peer-type
	out.Selector = in.Selector
	return nil
}

func autoConvert_v1alpha1_NamespaceTemplateSpec_To_v1beta1_NamespaceTemplateSpec(in *NamespaceTemplateSpec, out *v1beta1.NamespaceTemplateSpec, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.Spec = in.Spec
	return nil
}

// Convert_v1alpha1_NamespaceTemplateSpec_To_v1beta1_NamespaceTemplateSpec is an autogenerated conversion function.
func Convert_v1alpha1_NamespaceTemplateSpec_To_v1beta1_NamespaceTemplateSpec(in *NamespaceTemplateSpec, out *v1beta1.NamespaceTemplateSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_NamespaceTemplateSpec_To_v1beta1_NamespaceTemplateSpec(in, out, s)
}

func autoConvert_v1beta1_NamespaceTemplateSpec_To_v1alpha1_NamespaceTemplateSpec(in *v1beta1.NamespaceTemplateSpec, out *NamespaceTemplateSpec, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.Spec = in.Spec
	return nil
}

// Convert_v1beta1_NamespaceTemplateSpec_To_v1alpha1_NamespaceTemplateSpec is an autogenerated conversion function.
func Convert_v1beta1_NamespaceTemplateSpec_To_v1alpha1_NamespaceTemplateSpec(in *v1beta1.NamespaceTemplateSpec, out *NamespaceTemplateSpec, s conversion.Scope) error {
	return autoConvert_v1beta1_NamespaceTemplateSpec_To_v1alpha1_NamespaceTemplateSpec(in, out, s)
}

func autoConvert_v1alpha1_Optimization_To_v1beta1_Optimization(in *Optimization, out *v1beta1.Optimization, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	return nil
}

// Convert_v1alpha1_Optimization_To_v1beta1_Optimization is an autogenerated conversion function.
func Convert_v1alpha1_Optimization_To_v1beta1_Optimization(in *Optimization, out *v1beta1.Optimization, s conversion.Scope) error {
	return autoConvert_v1alpha1_Optimization_To_v1beta1_Optimization(in, out, s)
}

func autoConvert_v1beta1_Optimization_To_v1alpha1_Optimization(in *v1beta1.Optimization, out *Optimization, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	return nil
}

// Convert_v1beta1_Optimization_To_v1alpha1_Optimization is an autogenerated conversion function.
func Convert_v1beta1_Optimization_To_v1alpha1_Optimization(in *v1beta1.Optimization, out *Optimization, s conversion.Scope) error {
	return autoConvert_v1beta1_Optimization_To_v1alpha1_Optimization(in, out, s)
}

func autoConvert_v1alpha1_OrderConstraint_To_v1beta1_OrderConstraint(in *OrderConstraint, out *v1beta1.OrderConstraint, s conversion.Scope) error {
	out.LowerParameter = in.LowerParameter
	out.UpperParameter = in.UpperParameter
	return nil
}

// Convert_v1alpha1_OrderConstraint_To_v1beta1_OrderConstraint is an autogenerated conversion function.
func Convert_v1alpha1_OrderConstraint_To_v1beta1_OrderConstraint(in *OrderConstraint, out *v1beta1.OrderConstraint, s conversion.Scope) error {
	return autoConvert_v1alpha1_OrderConstraint_To_v1beta1_OrderConstraint(in, out, s)
}

func autoConvert_v1beta1_OrderConstraint_To_v1alpha1_OrderConstraint(in *v1beta1.OrderConstraint, out *OrderConstraint, s conversion.Scope) error {
	out.LowerParameter = in.LowerParameter
	out.UpperParameter = in.UpperParameter
	return nil
}

// Convert_v1beta1_OrderConstraint_To_v1alpha1_OrderConstraint is an autogenerated conversion function.
func Convert_v1beta1_OrderConstraint_To_v1alpha1_OrderConstraint(in *v1beta1.OrderConstraint, out *OrderConstraint, s conversion.Scope) error {
	return autoConvert_v1beta1_OrderConstraint_To_v1alpha1_OrderConstraint(in, out, s)
}

func autoConvert_v1alpha1_Parameter_To_v1beta1_Parameter(in *Parameter, out *v1beta1.Parameter, s conversion.Scope) error {
	out.Name = in.Name
	out.Baseline = in.Baseline
	out.Min = in.Min
	out.Max = in.Max
	out.Values = in.Values
	return nil
}

func autoConvert_v1beta1_Parameter_To_v1alpha1_Parameter(in *v1beta1.Parameter, out *Parameter, s conversion.Scope) error {
	out.Name = in.Name
	out.Baseline = in.Baseline
	out.Min = in.Min
	out.Max = in.Max
	out.Values = in.Values
	return nil
}

func autoConvert_v1alpha1_ParameterSelector_To_v1beta1_ParameterSelector(in *ParameterSelector, out *v1beta1.ParameterSelector, s conversion.Scope) error {
	out.Name = in.Name
	return nil
}

// Convert_v1alpha1_ParameterSelector_To_v1beta1_ParameterSelector is an autogenerated conversion function.
func Convert_v1alpha1_ParameterSelector_To_v1beta1_ParameterSelector(in *ParameterSelector, out *v1beta1.ParameterSelector, s conversion.Scope) error {
	return autoConvert_v1alpha1_ParameterSelector_To_v1beta1_ParameterSelector(in, out, s)
}

func autoConvert_v1beta1_ParameterSelector_To_v1alpha1_ParameterSelector(in *v1beta1.ParameterSelector, out *ParameterSelector, s conversion.Scope) error {
	out.Name = in.Name
	return nil
}

// Convert_v1beta1_ParameterSelector_To_v1alpha1_ParameterSelector is an autogenerated conversion function.
func Convert_v1beta1_ParameterSelector_To_v1alpha1_ParameterSelector(in *v1beta1.ParameterSelector, out *ParameterSelector, s conversion.Scope) error {
	return autoConvert_v1beta1_ParameterSelector_To_v1alpha1_ParameterSelector(in, out, s)
}

func autoConvert_v1alpha1_PatchOperation_To_v1beta1_PatchOperation(in *PatchOperation, out *v1beta1.PatchOperation, s conversion.Scope) error {
	out.TargetRef = in.TargetRef
	out.PatchType = types.PatchType(in.PatchType)
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.Data, &out.Data, s); err != nil {
		return err
	}
	out.AttemptsRemaining = in.AttemptsRemaining
	return nil
}

// Convert_v1alpha1_PatchOperation_To_v1beta1_PatchOperation is an autogenerated conversion function.
func Convert_v1alpha1_PatchOperation_To_v1beta1_PatchOperation(in *PatchOperation, out *v1beta1.PatchOperation, s conversion.Scope) error {
	return autoConvert_v1alpha1_PatchOperation_To_v1beta1_PatchOperation(in, out, s)
}

func autoConvert_v1beta1_PatchOperation_To_v1alpha1_PatchOperation(in *v1beta1.PatchOperation, out *PatchOperation, s conversion.Scope) error {
	out.TargetRef = in.TargetRef
	out.PatchType = types.PatchType(in.PatchType)
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.Data, &out.Data, s); err != nil {
		return err
	}
	out.AttemptsRemaining = in.AttemptsRemaining
	return nil
}

// Convert_v1beta1_PatchOperation_To_v1alpha1_PatchOperation is an autogenerated conversion function.
func Convert_v1beta1_PatchOperation_To_v1alpha1_PatchOperation(in *v1beta1.PatchOperation, out *PatchOperation, s conversion.Scope) error {
	return autoConvert_v1beta1_PatchOperation_To_v1alpha1_PatchOperation(in, out, s)
}

func autoConvert_v1alpha1_PatchReadinessGate_To_v1beta1_PatchReadinessGate(in *PatchReadinessGate, out *v1beta1.PatchReadinessGate, s conversion.Scope) error {
	out.ConditionType = in.ConditionType
	return nil
}

// Convert_v1alpha1_PatchReadinessGate_To_v1beta1_PatchReadinessGate is an autogenerated conversion function.
func Convert_v1alpha1_PatchReadinessGate_To_v1beta1_PatchReadinessGate(in *PatchReadinessGate, out *v1beta1.PatchReadinessGate, s conversion.Scope) error {
	return autoConvert_v1alpha1_PatchReadinessGate_To_v1beta1_PatchReadinessGate(in, out, s)
}

func autoConvert_v1beta1_PatchReadinessGate_To_v1alpha1_PatchReadinessGate(in *v1beta1.PatchReadinessGate, out *PatchReadinessGate, s conversion.Scope) error {
	out.ConditionType = in.ConditionType
	return nil
}

// Convert_v1beta1_PatchReadinessGate_To_v1alpha1_PatchReadinessGate is an autogenerated conversion function.
func Convert_v1beta1_PatchReadinessGate_To_v1alpha1_PatchReadinessGate(in *v1beta1.PatchReadinessGate, out *PatchReadinessGate, s conversion.Scope) error {
	return autoConvert_v1beta1_PatchReadinessGate_To_v1alpha1_PatchReadinessGate(in, out, s)
}

func autoConvert_v1alpha1_PatchTemplate_To_v1beta1_PatchTemplate(in *PatchTemplate, out *v1beta1.PatchTemplate, s conversion.Scope) error {
	out.Type = v1beta1.PatchType(in.Type)
	out.Patch = in.Patch
	out.TargetRef = in.TargetRef
	if in.ReadinessGates != nil {
		in, out := &in.ReadinessGates, &out.ReadinessGates
		*out = make([]v1beta1.PatchReadinessGate, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_PatchReadinessGate_To_v1beta1_PatchReadinessGate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.ReadinessGates = nil
	}
	return nil
}

// Convert_v1alpha1_PatchTemplate_To_v1beta1_PatchTemplate is an autogenerated conversion function.
func Convert_v1alpha1_PatchTemplate_To_v1beta1_PatchTemplate(in *PatchTemplate, out *v1beta1.PatchTemplate, s conversion.Scope) error {
	return autoConvert_v1alpha1_PatchTemplate_To_v1beta1_PatchTemplate(in, out, s)
}

func autoConvert_v1beta1_PatchTemplate_To_v1alpha1_PatchTemplate(in *v1beta1.PatchTemplate, out *PatchTemplate, s conversion.Scope) error {
	out.Type = PatchType(in.Type)
	out.Patch = in.Patch
	out.TargetRef = in.TargetRef
	if in.ReadinessGates != nil {
		in, out := &in.ReadinessGates, &out.ReadinessGates
		*out = make([]PatchReadinessGate, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_PatchReadinessGate_To_v1alpha1_PatchReadinessGate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.ReadinessGates = nil
	}
	return nil
}

// Convert_v1beta1_PatchTemplate_To_v1alpha1_PatchTemplate is an autogenerated conversion function.
func Convert_v1beta1_PatchTemplate_To_v1alpha1_PatchTemplate(in *v1beta1.PatchTemplate, out *PatchTemplate, s conversion.Scope) error {
	return autoConvert_v1beta1_PatchTemplate_To_v1alpha1_PatchTemplate(in, out, s)
}

func autoConvert_v1alpha1_ReadinessCheck_To_v1beta1_ReadinessCheck(in *ReadinessCheck, out *v1beta1.ReadinessCheck, s conversion.Scope) error {
	out.TargetRef = in.TargetRef
	out.Selector = in.Selector
	out.ConditionTypes = in.ConditionTypes
	out.InitialDelaySeconds = in.InitialDelaySeconds
	out.PeriodSeconds = in.PeriodSeconds
	out.AttemptsRemaining = in.AttemptsRemaining
	out.LastCheckTime = in.LastCheckTime
	return nil
}

// Convert_v1alpha1_ReadinessCheck_To_v1beta1_ReadinessCheck is an autogenerated conversion function.
func Convert_v1alpha1_ReadinessCheck_To_v1beta1_ReadinessCheck(in *ReadinessCheck, out *v1beta1.ReadinessCheck, s conversion.Scope) error {
	return autoConvert_v1alpha1_ReadinessCheck_To_v1beta1_ReadinessCheck(in, out, s)
}

func autoConvert_v1beta1_ReadinessCheck_To_v1alpha1_ReadinessCheck(in *v1beta1.ReadinessCheck, out *ReadinessCheck, s conversion.Scope) error {
	out.TargetRef = in.TargetRef
	out.Selector = in.Selector
	out.ConditionTypes = in.ConditionTypes
	out.InitialDelaySeconds = in.InitialDelaySeconds
	out.PeriodSeconds = in.PeriodSeconds
	out.AttemptsRemaining = in.AttemptsRemaining
	out.LastCheckTime = in.LastCheckTime
	return nil
}

// Convert_v1beta1_ReadinessCheck_To_v1alpha1_ReadinessCheck is an autogenerated conversion function.
func Convert_v1beta1_ReadinessCheck_To_v1alpha1_ReadinessCheck(in *v1beta1.ReadinessCheck, out *ReadinessCheck, s conversion.Scope) error {
	return autoConvert_v1beta1_ReadinessCheck_To_v1alpha1_ReadinessCheck(in, out, s)
}

func autoConvert_v1alpha1_SetupTask_To_v1beta1_SetupTask(in *SetupTask, out *v1beta1.SetupTask, s conversion.Scope) error {
	out.Name = in.Name
	out.Image = in.Image
	out.Command = in.Command
	out.Args = in.Args
	out.SkipCreate = in.SkipCreate
	out.SkipDelete = in.SkipDelete
	out.VolumeMounts = in.VolumeMounts
	out.HelmChart = in.HelmChart
	out.HelmChartVersion = in.HelmChartVersion
	if in.HelmValues != nil {
		in, out := &in.HelmValues, &out.HelmValues
		*out = make([]v1beta1.HelmValue, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_HelmValue_To_v1beta1_HelmValue(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.HelmValues = nil
	}
	if in.HelmValuesFrom != nil {
		in, out := &in.HelmValuesFrom, &out.HelmValuesFrom
		*out = make([]v1beta1.HelmValuesFromSource, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_HelmValuesFromSource_To_v1beta1_HelmValuesFromSource(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.HelmValuesFrom = nil
	}
	out.HelmRepository = in.HelmRepository
	return nil
}

// Convert_v1alpha1_SetupTask_To_v1beta1_SetupTask is an autogenerated conversion function.
func Convert_v1alpha1_SetupTask_To_v1beta1_SetupTask(in *SetupTask, out *v1beta1.SetupTask, s conversion.Scope) error {
	return autoConvert_v1alpha1_SetupTask_To_v1beta1_SetupTask(in, out, s)
}

func autoConvert_v1beta1_SetupTask_To_v1alpha1_SetupTask(in *v1beta1.SetupTask, out *SetupTask, s conversion.Scope) error {
	out.Name = in.Name
	out.Image = in.Image
	out.Command = in.Command
	out.Args = in.Args
	out.SkipCreate = in.SkipCreate
	out.SkipDelete = in.SkipDelete
	out.VolumeMounts = in.VolumeMounts
	out.HelmChart = in.HelmChart
	out.HelmChartVersion = in.HelmChartVersion
	if in.HelmValues != nil {
		in, out := &in.HelmValues, &out.HelmValues
		*out = make([]HelmValue, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_HelmValue_To_v1alpha1_HelmValue(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.HelmValues = nil
	}
	if in.HelmValuesFrom != nil {
		in, out := &in.HelmValuesFrom, &out.HelmValuesFrom
		*out = make([]HelmValuesFromSource, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_HelmValuesFromSource_To_v1alpha1_HelmValuesFromSource(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.HelmValuesFrom = nil
	}
	out.HelmRepository = in.HelmRepository
	return nil
}

// Convert_v1beta1_SetupTask_To_v1alpha1_SetupTask is an autogenerated conversion function.
func Convert_v1beta1_SetupTask_To_v1alpha1_SetupTask(in *v1beta1.SetupTask, out *SetupTask, s conversion.Scope) error {
	return autoConvert_v1beta1_SetupTask_To_v1alpha1_SetupTask(in, out, s)
}

func autoConvert_v1alpha1_SumConstraint_To_v1beta1_SumConstraint(in *SumConstraint, out *v1beta1.SumConstraint, s conversion.Scope) error {
	out.Bound = in.Bound
	out.IsUpperBound = in.IsUpperBound
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]v1beta1.SumConstraintParameter, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_SumConstraintParameter_To_v1beta1_SumConstraintParameter(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Parameters = nil
	}
	return nil
}

// Convert_v1alpha1_SumConstraint_To_v1beta1_SumConstraint is an autogenerated conversion function.
func Convert_v1alpha1_SumConstraint_To_v1beta1_SumConstraint(in *SumConstraint, out *v1beta1.SumConstraint, s conversion.Scope) error {
	return autoConvert_v1alpha1_SumConstraint_To_v1beta1_SumConstraint(in, out, s)
}

func autoConvert_v1beta1_SumConstraint_To_v1alpha1_SumConstraint(in *v1beta1.SumConstraint, out *SumConstraint, s conversion.Scope) error {
	out.Bound = in.Bound
	out.IsUpperBound = in.IsUpperBound
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]SumConstraintParameter, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_SumConstraintParameter_To_v1alpha1_SumConstraintParameter(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Parameters = nil
	}
	return nil
}

// Convert_v1beta1_SumConstraint_To_v1alpha1_SumConstraint is an autogenerated conversion function.
func Convert_v1beta1_SumConstraint_To_v1alpha1_SumConstraint(in *v1beta1.SumConstraint, out *SumConstraint, s conversion.Scope) error {
	return autoConvert_v1beta1_SumConstraint_To_v1alpha1_SumConstraint(in, out, s)
}

func autoConvert_v1alpha1_SumConstraintParameter_To_v1beta1_SumConstraintParameter(in *SumConstraintParameter, out *v1beta1.SumConstraintParameter, s conversion.Scope) error {
	out.Name = in.Name
	out.Weight = in.Weight
	return nil
}

// Convert_v1alpha1_SumConstraintParameter_To_v1beta1_SumConstraintParameter is an autogenerated conversion function.
func Convert_v1alpha1_SumConstraintParameter_To_v1beta1_SumConstraintParameter(in *SumConstraintParameter, out *v1beta1.SumConstraintParameter, s conversion.Scope) error {
	return autoConvert_v1alpha1_SumConstraintParameter_To_v1beta1_SumConstraintParameter(in, out, s)
}

func autoConvert_v1beta1_SumConstraintParameter_To_v1alpha1_SumConstraintParameter(in *v1beta1.SumConstraintParameter, out *SumConstraintParameter, s conversion.Scope) error {
	out.Name = in.Name
	out.Weight = in.Weight
	return nil
}

// Convert_v1beta1_SumConstraintParameter_To_v1alpha1_SumConstraintParameter is an autogenerated conversion function.
func Convert_v1beta1_SumConstraintParameter_To_v1alpha1_SumConstraintParameter(in *v1beta1.SumConstraintParameter, out *SumConstraintParameter, s conversion.Scope) error {
	return autoConvert_v1beta1_SumConstraintParameter_To_v1alpha1_SumConstraintParameter(in, out, s)
}

func autoConvert_v1alpha1_Trial_To_v1beta1_Trial(in *Trial, out *v1beta1.Trial, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_TrialSpec_To_v1beta1_TrialSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_TrialStatus_To_v1beta1_TrialStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1beta1_Trial_To_v1alpha1_Trial(in *v1beta1.Trial, out *Trial, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1beta1_TrialSpec_To_v1alpha1_TrialSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1beta1_TrialStatus_To_v1alpha1_TrialStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_TrialCondition_To_v1beta1_TrialCondition(in *TrialCondition, out *v1beta1.TrialCondition, s conversion.Scope) error {
	out.Type = v1beta1.TrialConditionType(in.Type)
	out.Status = v1.ConditionStatus(in.Status)
	out.LastProbeTime = in.LastProbeTime
	out.LastTransitionTime = in.LastTransitionTime
	out.Reason = in.Reason
	out.Message = in.Message
	return nil
}

// Convert_v1alpha1_TrialCondition_To_v1beta1_TrialCondition is an autogenerated conversion function.
func Convert_v1alpha1_TrialCondition_To_v1beta1_TrialCondition(in *TrialCondition, out *v1beta1.TrialCondition, s conversion.Scope) error {
	return autoConvert_v1alpha1_TrialCondition_To_v1beta1_TrialCondition(in, out, s)
}

func autoConvert_v1beta1_TrialCondition_To_v1alpha1_TrialCondition(in *v1beta1.TrialCondition, out *TrialCondition, s conversion.Scope) error {
	out.Type = TrialConditionType(in.Type)
	out.Status = v1.ConditionStatus(in.Status)
	out.LastProbeTime = in.LastProbeTime
	out.LastTransitionTime = in.LastTransitionTime
	out.Reason = in.Reason
	out.Message = in.Message
	return nil
}

// Convert_v1beta1_TrialCondition_To_v1alpha1_TrialCondition is an autogenerated conversion function.
func Convert_v1beta1_TrialCondition_To_v1alpha1_TrialCondition(in *v1beta1.TrialCondition, out *TrialCondition, s conversion.Scope) error {
	return autoConvert_v1beta1_TrialCondition_To_v1alpha1_TrialCondition(in, out, s)
}

func autoConvert_v1alpha1_TrialList_To_v1beta1_TrialList(in *TrialList, out *v1beta1.TrialList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1beta1.Trial, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Trial_To_v1beta1_Trial(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_TrialList_To_v1beta1_TrialList is an autogenerated conversion function.
func Convert_v1alpha1_TrialList_To_v1beta1_TrialList(in *TrialList, out *v1beta1.TrialList, s conversion.Scope) error {
	return autoConvert_v1alpha1_TrialList_To_v1beta1_TrialList(in, out, s)
}

func autoConvert_v1beta1_TrialList_To_v1alpha1_TrialList(in *v1beta1.TrialList, out *TrialList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Trial, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_Trial_To_v1alpha1_Trial(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1beta1_TrialList_To_v1alpha1_TrialList is an autogenerated conversion function.
func Convert_v1beta1_TrialList_To_v1alpha1_TrialList(in *v1beta1.TrialList, out *TrialList, s conversion.Scope) error {
	return autoConvert_v1beta1_TrialList_To_v1alpha1_TrialList(in, out, s)
}

func autoConvert_v1alpha1_TrialReadinessGate_To_v1beta1_TrialReadinessGate(in *TrialReadinessGate, out *v1beta1.TrialReadinessGate, s conversion.Scope) error {
	out.Kind = in.Kind
	out.Name = in.Name
	out.APIVersion = in.APIVersion
	out.Selector = in.Selector
	out.ConditionTypes = in.ConditionTypes
	out.InitialDelaySeconds = in.InitialDelaySeconds
	out.PeriodSeconds = in.PeriodSeconds
	out.FailureThreshold = in.FailureThreshold
	return nil
}

// Convert_v1alpha1_TrialReadinessGate_To_v1beta1_TrialReadinessGate is an autogenerated conversion function.
func Convert_v1alpha1_TrialReadinessGate_To_v1beta1_TrialReadinessGate(in *TrialReadinessGate, out *v1beta1.TrialReadinessGate, s conversion.Scope) error {
	return autoConvert_v1alpha1_TrialReadinessGate_To_v1beta1_TrialReadinessGate(in, out, s)
}

func autoConvert_v1beta1_TrialReadinessGate_To_v1alpha1_TrialReadinessGate(in *v1beta1.TrialReadinessGate, out *TrialReadinessGate, s conversion.Scope) error {
	out.Kind = in.Kind
	out.Name = in.Name
	out.APIVersion = in.APIVersion
	out.Selector = in.Selector
	out.ConditionTypes = in.ConditionTypes
	out.InitialDelaySeconds = in.InitialDelaySeconds
	out.PeriodSeconds = in.PeriodSeconds
	out.FailureThreshold = in.FailureThreshold
	return nil
}

// Convert_v1beta1_TrialReadinessGate_To_v1alpha1_TrialReadinessGate is an autogenerated conversion function.
func Convert_v1beta1_TrialReadinessGate_To_v1alpha1_TrialReadinessGate(in *v1beta1.TrialReadinessGate, out *TrialReadinessGate, s conversion.Scope) error {
	return autoConvert_v1beta1_TrialReadinessGate_To_v1alpha1_TrialReadinessGate(in, out, s)
}

func autoConvert_v1alpha1_TrialSpec_To_v1beta1_TrialSpec(in *TrialSpec, out *v1beta1.TrialSpec, s conversion.Scope) error {
	out.ExperimentRef = in.ExperimentRef
	if in.Assignments != nil {
		in, out := &in.Assignments, &out.Assignments
		*out = make([]v1beta1.Assignment, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Assignment_To_v1beta1_Assignment(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Assignments = nil
	}
	out.Selector = in.Selector
	// WARNING: in.Template requires manual conversion: does not exist in peer-type
	out.InitialDelaySeconds = in.InitialDelaySeconds
	out.StartTimeOffset = in.StartTimeOffset
	out.ApproximateRuntime = in.ApproximateRuntime
	out.TTLSecondsAfterFinished = in.TTLSecondsAfterFinished
	out.TTLSecondsAfterFailure = in.TTLSecondsAfterFailure
	if in.ReadinessGates != nil {
		in, out := &in.ReadinessGates, &out.ReadinessGates
		*out = make([]v1beta1.TrialReadinessGate, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_TrialReadinessGate_To_v1beta1_TrialReadinessGate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.ReadinessGates = nil
	}
	// WARNING: in.PatchOperations requires manual conversion: does not exist in peer-type
	// WARNING: in.ReadinessChecks requires manual conversion: does not exist in peer-type
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]v1beta1.Value, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Value_To_v1beta1_Value(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Values = nil
	}
	if in.SetupTasks != nil {
		in, out := &in.SetupTasks, &out.SetupTasks
		*out = make([]v1beta1.SetupTask, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_SetupTask_To_v1beta1_SetupTask(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.SetupTasks = nil
	}
	out.SetupVolumes = in.SetupVolumes
	out.SetupServiceAccountName = in.SetupServiceAccountName
	out.SetupDefaultClusterRole = in.SetupDefaultClusterRole
	out.SetupDefaultRules = in.SetupDefaultRules
	return nil
}

func autoConvert_v1beta1_TrialSpec_To_v1alpha1_TrialSpec(in *v1beta1.TrialSpec, out *TrialSpec, s conversion.Scope) error {
	out.ExperimentRef = in.ExperimentRef
	if in.Assignments != nil {
		in, out := &in.Assignments, &out.Assignments
		*out = make([]Assignment, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_Assignment_To_v1alpha1_Assignment(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Assignments = nil
	}
	out.Selector = in.Selector
	// WARNING: in.JobTemplate requires manual conversion: does not exist in peer-type
	out.InitialDelaySeconds = in.InitialDelaySeconds
	out.StartTimeOffset = in.StartTimeOffset
	out.ApproximateRuntime = in.ApproximateRuntime
	out.TTLSecondsAfterFinished = in.TTLSecondsAfterFinished
	out.TTLSecondsAfterFailure = in.TTLSecondsAfterFailure
	if in.ReadinessGates != nil {
		in, out := &in.ReadinessGates, &out.ReadinessGates
		*out = make([]TrialReadinessGate, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_TrialReadinessGate_To_v1alpha1_TrialReadinessGate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.ReadinessGates = nil
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]Value, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_Value_To_v1alpha1_Value(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Values = nil
	}
	if in.SetupTasks != nil {
		in, out := &in.SetupTasks, &out.SetupTasks
		*out = make([]SetupTask, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_SetupTask_To_v1alpha1_SetupTask(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.SetupTasks = nil
	}
	out.SetupVolumes = in.SetupVolumes
	out.SetupServiceAccountName = in.SetupServiceAccountName
	out.SetupDefaultClusterRole = in.SetupDefaultClusterRole
	out.SetupDefaultRules = in.SetupDefaultRules
	return nil
}

func autoConvert_v1alpha1_TrialStatus_To_v1beta1_TrialStatus(in *TrialStatus, out *v1beta1.TrialStatus, s conversion.Scope) error {
	out.Phase = in.Phase
	out.Assignments = in.Assignments
	out.Values = in.Values
	out.StartTime = in.StartTime
	out.CompletionTime = in.CompletionTime
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1beta1.TrialCondition, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_TrialCondition_To_v1beta1_TrialCondition(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Conditions = nil
	}
	return nil
}

// Convert_v1alpha1_TrialStatus_To_v1beta1_TrialStatus is an autogenerated conversion function.
func Convert_v1alpha1_TrialStatus_To_v1beta1_TrialStatus(in *TrialStatus, out *v1beta1.TrialStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_TrialStatus_To_v1beta1_TrialStatus(in, out, s)
}

func autoConvert_v1beta1_TrialStatus_To_v1alpha1_TrialStatus(in *v1beta1.TrialStatus, out *TrialStatus, s conversion.Scope) error {
	out.Phase = in.Phase
	out.Assignments = in.Assignments
	out.Values = in.Values
	out.StartTime = in.StartTime
	out.CompletionTime = in.CompletionTime
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]TrialCondition, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_TrialCondition_To_v1alpha1_TrialCondition(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Conditions = nil
	}
	// WARNING: in.PatchOperations requires manual conversion: does not exist in peer-type
	// WARNING: in.ReadinessChecks requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_TrialTemplateSpec_To_v1beta1_TrialTemplateSpec(in *TrialTemplateSpec, out *v1beta1.TrialTemplateSpec, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_TrialSpec_To_v1beta1_TrialSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_TrialTemplateSpec_To_v1beta1_TrialTemplateSpec is an autogenerated conversion function.
func Convert_v1alpha1_TrialTemplateSpec_To_v1beta1_TrialTemplateSpec(in *TrialTemplateSpec, out *v1beta1.TrialTemplateSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_TrialTemplateSpec_To_v1beta1_TrialTemplateSpec(in, out, s)
}

func autoConvert_v1beta1_TrialTemplateSpec_To_v1alpha1_TrialTemplateSpec(in *v1beta1.TrialTemplateSpec, out *TrialTemplateSpec, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1beta1_TrialSpec_To_v1alpha1_TrialSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1beta1_TrialTemplateSpec_To_v1alpha1_TrialTemplateSpec is an autogenerated conversion function.
func Convert_v1beta1_TrialTemplateSpec_To_v1alpha1_TrialTemplateSpec(in *v1beta1.TrialTemplateSpec, out *TrialTemplateSpec, s conversion.Scope) error {
	return autoConvert_v1beta1_TrialTemplateSpec_To_v1alpha1_TrialTemplateSpec(in, out, s)
}

func autoConvert_v1alpha1_Value_To_v1beta1_Value(in *Value, out *v1beta1.Value, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	out.Error = in.Error
	out.AttemptsRemaining = in.AttemptsRemaining
	return nil
}

// Convert_v1alpha1_Value_To_v1beta1_Value is an autogenerated conversion function.
func Convert_v1alpha1_Value_To_v1beta1_Value(in *Value, out *v1beta1.Value, s conversion.Scope) error {
	return autoConvert_v1alpha1_Value_To_v1beta1_Value(in, out, s)
}

func autoConvert_v1beta1_Value_To_v1alpha1_Value(in *v1beta1.Value, out *Value, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	out.Error = in.Error
	out.AttemptsRemaining = in.AttemptsRemaining
	return nil
}

// Convert_v1beta1_Value_To_v1alpha1_Value is an autogenerated conversion function.
func Convert_v1beta1_Value_To_v1alpha1_Value(in *v1beta1.Value, out *Value, s conversion.Scope) error {
	return autoConvert_v1beta1_Value_To_v1alpha1_Value(in, out, s)
}
